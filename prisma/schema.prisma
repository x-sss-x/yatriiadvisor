// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model tourists {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name     String
  last_name      String
  phone_number   String
  mail           String
  password       String
  city           String
  address        String
  interest_Place String
  Review         reviews[]
  histories      histories[]
  favourites     favourites[]
}

model guides {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name   String
  last_name    String
  id_proof     String
  mail         String
  password     String
  address      String
  city         String
  phone_number String
  experience   String
  destinations destinations[]
  places       places[]
}

model destinations {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String
  place    places[]
  guide    guides   @relation(fields: [guidesId], references: [id])
  guidesId String   @db.Uuid
}

model places {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  image_url     String[]
  best_time     String
  best_season   String
  destinations  destinations @relation(fields: [destinationId], references: [id])
  destinationId String       @db.Uuid
  temperature   Float
  humidity      Float
  created_at    DateTime     @default(dbgenerated("now()")) @db.Timestamptz()
  guide         guides       @relation(fields: [guidesId], references: [id])
  guidesId      String       @db.Uuid
  reviews       reviews[]
  favourites    favourites[]
}

model reviews {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rating         Int
  review_content String     @db.VarChar(200)
  memories       String[]
  created_at     DateTime   @default(dbgenerated("now()")) @db.Timestamptz()
  tourists       tourists   @relation(fields: [touristsId], references: [id])
  touristsId     String     @db.Uuid
  places         places     @relation(fields: [placesId], references: [id])
  placesId       String     @db.Uuid
  histories      histories?
}

model histories {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tourists   tourists @relation(fields: [touristsId], references: [id])
  touristsId String   @db.Uuid
  reviews    reviews  @relation(fields: [reviewsId], references: [id])
  reviewsId  String   @unique @db.Uuid
}

model favourites {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tourists   tourists? @relation(fields: [touristsId], references: [id])
  touristsId String?   @db.Uuid
  place      places    @relation(fields: [placeId], references: [id])
  placeId    String    @db.Uuid
}
